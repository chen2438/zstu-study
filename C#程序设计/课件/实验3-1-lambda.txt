1．	按要求编写Lambda表达式：
.NET已定义的Func<out TResult>是一个泛型委托，它封装一个方法，该方法不具有参数，且返回由 TResult 参数指定的类型的值。它的使用，举一例如下：
            //Lambda表达式无参数，返回int值，符合委托定义
            Func<int> f1 = () => DateTime.Now.Year; 
            Console.WriteLine(f1());
该泛型委托有好几个同名兄弟类型，如Func<in T, out TResult>，Func <in T1, in T2, out TResult>等（直到T16）等，仿照上面的例子编写Lambda表达式，并调用它们：
（1）写一个Lambda表达式赋给Func<int, double> f2，使其完成取平方根功能（可用Math.Sqrt方法）。
（2）写一个Lambda表达式赋给Func<int, int, double> f3，使两个整数参数先平方，再相加，再取平方根。
（3）Predicate<T>泛型委托代表一类函数，它们对参数实施判断并返回bool值，实际上表示一种条件。写一个Predicate<int>型Lambda表达式，并调用它。
（4）Action、Action<T>、Action<T1,T2>…等委托封装的方法，有0至16个参数，但没有返回值，试写出Action<String>和Action<int, List<int>>的Labmda表达式，并调用它们。
（调用它们时，如果需要参数，则自行生成；可以和Java中的Lambda表达式比较一下）


Func<int, double> f2 = x => Math.Sqrt(x);
Console.WriteLine(f2(3));

Func<int, int, double> f3 = (x, y) => Math.Sqrt(x * x + y * y);
Console.WriteLine(f3(3, 4));

int num = 5;
Predicate<int> modn = x => x % num == 0;
Console.WriteLine($"-3 is {num}'s multiple? {modn(-3)}");

Action<string> print = name => Console.Write(name + "\t");
print("Hello");
print("World");
Console.WriteLine();

Action<int, List<int>> a2 = (x, y) => y.Add(x);
List<int> lst = new List<int>();
a2(1, lst);
a2(2, lst);
foreach (int value in lst)
    Console.WriteLine(value);
以上仅供参考，不一定和这些一模一样
